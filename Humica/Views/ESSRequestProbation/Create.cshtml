@model Humica.EForm.IClsESSRequestProbation
<script type="text/javascript">

    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
    });
    function SelectEmp(s, e) {
        selectedIDs = s.GetSelectedItem().GetColumnText(0);
        ShowDataEmp();
    }

    function ShowDataEmp() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: _baseUrl + '/SelfService/MyTeam/ESSRequestProbation/ShowDataEmp',
            data: { 'EmpCode': selectedIDs },
            success: function (data) {
                if (data.MS == "OK") {
                    var StartDate = data.StartDate;
                    nowDate = new Date(parseInt(StartDate.substr(6)));
                    txtAllName.SetValue(data.AllName);
                    txtBranch.SetValue(data.Branch);
                    txtDivision.SetValue(data.Division);
                    txtDepartment.SetValue(data.DEPT);
                    txtSection.SetValue(data.SECT);
                    txtLevel.SetValue(data.LevelCode);
                    txtPosition.SetValue(data.Position);
                    txtStartDate.SetValue(nowDate);
                    txtCSalary.SetValue(data.Salary)
                    txtNewSalary.SetValue(data.Salary)
                    GridApproval.Refresh();
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
    function valueChange(s, e) {
        Refreshvalue();
    }
    function Refreshvalue() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: _baseUrl + '/SelfService/MyTeam/ESSRequestProbation/Refreshvalue',
            data: {'Increase': txtIncrease.GetValue(), 'EmpCode': cboEmployee.GetValue() },
            success: function (data) {
                if (data.MS == "OK") {
                    txtNewSalary.SetValue(data.NewSalary);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
</script>

@Html.DevExpress().FormLayout(settings =>
{
    settings.Name = "Create";
    settings.AlignItemCaptionsInAllGroups = true;
    var IsSalary = false;
    var isReadOnly = false;
    if (ViewData[Humica.Models.SY.ClsConstant.IS_READ_ONLY] != null)
    {
        isReadOnly = true;
    }
    if (ViewData[Humica.Models.SY.ClsConstant.IS_SALARY] != null)
    {
        IsSalary = (bool)ViewData[Humica.Models.SY.ClsConstant.IS_SALARY];
    }

    settings.Items.AddGroupItem(m => Model.Header, g =>
    {
        g.ColCount = 3;
        g.GroupBoxDecoration = GroupBoxDecoration.None;
        g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
        g.Items.Add(m =>
        {
            var d = ("Employee Code") + "*";
            m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel(d);

        })
       .SetNestedContent(() =>
       {
           Html.DevExpress().ComboBoxFor(i => i.HeaderStaff.EmpCode, s =>
           {
               s.Properties.ClientInstanceName = "cboEmployee";
               s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
               s.Properties.ValidationSettings.SetFocusOnError = true;
               s.Properties.ValidationSettings.ErrorText = "*";
               s.Properties.TextField = "AllName";
               s.Properties.TextFormatString = "{0},{1}";
               s.Properties.ValueField = "EmpCode";
               s.Properties.Columns.Add("EmpCode", Humica.EF.Models.SY.SYSettings.getLabel("EmpCode"));
               s.Properties.Columns.Add("AllName", Humica.EF.Models.SY.SYSettings.getLabel("AllName"));
               s.Properties.Columns.Add("OthAllName", Humica.EF.Models.SY.SYSettings.getLabel("OthAllName"));
               s.Properties.ClientSideEvents.SelectedIndexChanged = "SelectEmp";
               s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
           }).BindList(ViewData["STAFF_SELECT"]).Render();
       });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("AllName");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.AllName, s =>
            {
                s.Properties.ClientInstanceName = "txtAllName";
                s.ReadOnly = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Branch");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Branch, s =>
            {
                s.Properties.ClientInstanceName = "txtBranch";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Division");
        })
           .SetNestedContent(() =>
           {
               Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Division, s =>
               {
                   s.Properties.ClientInstanceName = "txtDivision";
                   s.ReadOnly = true;
                   s.ShowModelErrors = true;
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
               }).Render();
           });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Department");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Department, s =>
            {
                s.Properties.ClientInstanceName = "txtDepartment";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Section");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Section, s =>
            {
                s.Properties.ClientInstanceName = "txtSection";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("LevelCode");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Level, s =>
            {
                s.Properties.ClientInstanceName = "txtLevel";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Position");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Position, s =>
            {
                s.Properties.ClientInstanceName = "txtPosition";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("StartDate");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().DateEditFor(i => i.HeaderStaff.StartDate, s =>
            {
                s.Properties.ClientInstanceName = "txtStartDate";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Status");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.Status, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtStatus";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Probation Type") + "*";
            m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
        })
          .SetNestedContent(() =>
          {
              Html.DevExpress().ComboBoxFor(i => i.Header.ProbationType, s =>
              {
                  s.ShowModelErrors = true;
                  s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                  s.Properties.ValidationSettings.SetFocusOnError = true;
                  s.Properties.ValidationSettings.ErrorText = "*";
                  s.Properties.TextField = "Description";
                  s.Properties.TextFormatString = "{1}";
                  s.Properties.ValueField = "Code";
                  s.Properties.Columns.Add("Code", Humica.EF.Models.SY.SYSettings.getLabel("Code"));
                  s.Properties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"), 250);
                  s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
              }).BindList(ViewData["PROBATION_LIST"]).Render();
          });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Attachment");
            m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().UploadControl(ss =>
            {
                ss.ShowProgressPanel = true;
                ss.CallbackRouteValues = new { Controller = "ESSRequestProbation", Action = "UploadControlCallbackActionImage" };
                ss.Name = "UploadControl";
                ss.UploadMode = UploadControlUploadMode.Auto;
                ss.AutoStartUpload = true;
                ss.Width = 120;
                ss.DialogTriggerID = "externalDropZone";
                ss.AdvancedModeSettings.EnableDragAndDrop = false;
                ss.AdvancedModeSettings.EnableMultiSelect = false;
                ss.ShowTextBox = false;
                ss.ShowUploadButton = false;
                ss.ShowAddRemoveButtons = true;
                ss.ShowProgressPanel = true;
                ss.ShowClearFileSelectionButton = true;
                ss.AdvancedModeSettings.EnableFileList = true;
                ss.AdvancedModeSettings.FileListPosition = UploadControlFileListPosition.Top;
                ss.AdvancedModeSettings.ExternalDropZoneID = "externalDropZone";
                ss.AdvancedModeSettings.DropZoneText = "";
                ss.ValidationSettings.MaxFileSize = 4194304;
                ss.BrowseButton.Image.IconID = IconID.ActionsNew16x16;
                ss.UploadButton.Text = String.Empty;
                ss.ValidationSettings.AllowedFileExtensions = new string[] { ".jpg", ".png", ".pdf" };
                ss.ValidationSettings.ErrorStyle.CssClass = "validationMessage";
                ss.BrowseButton.Text = Humica.EF.Models.SY.SYSettings.getLabel("");
                ss.ClientSideEvents.FileUploadComplete = "completedUploadFileItem";
            }).Render();

            Html.DevExpress().HyperLink(
              s =>
              {
                  s.Name = "file_uploaded";
                  s.ToolTip = "File";
                  s.ClientVisible = false;
                  s.Properties.Target = "_BLANK";
                  s.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");

              }).GetHtml();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("OldSalary");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Salary, s =>
            {
                s.Properties.ClientInstanceName = "txtCSalary";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.DisplayFormatString = "N2";
                s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Increase");
            m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
        })
            .SetNestedContent(() =>
            {
                Html.DevExpress().SpinEditFor(i => i.Header.Increase, s =>
                {
                    s.ReadOnly = IsSalary;
                    s.Properties.ClientInstanceName = "txtIncrease";
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.DisplayFormatString = "N2";
                    s.Properties.AllowNull = false;
                    s.Properties.ClientSideEvents.NumberChanged = "valueChange";
                    s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                }).Render();
            });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("NewSalary");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.NewSalary, s =>
            {
                s.Properties.ClientInstanceName = "txtNewSalary";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.DisplayFormatString = "N2";
                s.Properties.ValidationSettings.ErrorText = "*";
                s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Probation Date") + "*";
            m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().DateEditFor(i => i.Header.Probation, s =>
            {
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Reason") + "*";
            m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
            m.ColSpan = 2;
        })
         .SetNestedContent(() =>
         {
             Html.DevExpress().MemoFor(i => i.Header.Reason, s =>
             {
                 s.Height = 75;
                 s.Width = Unit.Percentage(100);
                 s.ShowModelErrors = true;
                 s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                 s.Properties.ValidationSettings.SetFocusOnError = true;
                 s.Properties.ValidationSettings.ErrorText = "*";
             }).Render();
         });
    });
}).GetHtml()
@Html.DevExpress().PageControl(
    settings =>
    {
        settings.Name = "pcScrollingWorkCalendar";
        settings.Width = Unit.Percentage(100);

        settings.EnableTabScrolling = true;
        settings.TabAlign = TabAlign.Justify;

        settings.Styles.Tab.CssClass = "scrolling_Tab";

        settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
         ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "ApprovalDetail")).SetContent(() =>
         {
             Html.RenderPartial("GridApproval", Model.ListApproval);
         });

    }).GetHtml()





