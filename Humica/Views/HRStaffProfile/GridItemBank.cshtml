@{
    var grid = Html.DevExpress().GridView(
    settings =>
    {

        settings.Name = "GridItemBank";
        settings.KeyFieldName = "LineItem";

        settings.Width = Unit.Percentage(100);
        settings.SettingsEditing.Mode = GridViewEditingMode.Inline;

        settings.CallbackRouteValues = new
        {
            Controller = "HRStaffProfile",
            Action = "GridItemBank" };
        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "HRStaffProfile", Action = "CreateBank" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "HRStaffProfile", Action = "EditBank" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "HRStaffProfile", Action = "DeleteBank" };

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowDeleteButton = true;
        settings.CommandColumn.FixedStyle = GridViewColumnFixedStyle.Left;
        settings.CommandColumn.ShowNewButtonInHeader = true;
        settings.CommandColumn.ShowCancelButton = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.SettingsBehavior.ConfirmDelete = true;
        settings.Columns.Add(column =>
        {
            column.Width = 50;
            column.ReadOnly = true;
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("No");
            column.FieldName = "LineItem";
        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Company Name");
            column.Width = 250;
            column.FieldName = "Company";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var textProperties = column.PropertiesEdit as ComboBoxProperties;
            textProperties.ValidationSettings.Display = Display.None;
            textProperties.DataSource = ViewData["Company_SELECT"];
            textProperties.TextFormatString = "{1}";
            textProperties.ValueField = "Company";
            textProperties.Columns.Add("Company", Humica.EF.Models.SY.SYSettings.getLabel("Code"));
            textProperties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"), 200);
            textProperties.ValueType = typeof(string);
        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Bank Name");
            column.Width = 150;
            column.FieldName = "BankName";
            column.ColumnType = MVCxGridViewColumnType.ComboBox;
            var textProperties = column.PropertiesEdit as ComboBoxProperties;
            textProperties.ValidationSettings.Display = Display.None;
            textProperties.DataSource = ViewData["BANK_SELECT"];
            textProperties.TextFormatString = "{1}";
            textProperties.ValueField = "Code";
            textProperties.Columns.Add("Code", Humica.EF.Models.SY.SYSettings.getLabel("Code"));
            textProperties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"), 200);
            textProperties.ValueType = typeof(string);
        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Account No");
            column.Width = 130;
            column.PropertiesEdit.ClientInstanceName = "txtBankAccount";
            column.FieldName = "AccountNo";
            var textProperties = column.PropertiesEdit as TextBoxProperties;
            textProperties.ValidationSettings.Display = Display.None;
        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Account Name");
            column.Width = 130;
            column.PropertiesEdit.ClientInstanceName = "txtAccountName";
            column.FieldName = "AccountName";
            var textProperties = column.PropertiesEdit as TextBoxProperties;
            textProperties.ValidationSettings.Display = Display.None;
        });
        settings.Columns.Add(column =>
        {
            column.FieldName = "Salary";
            column.Width = 120;
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Salary");
            column.ColumnType = MVCxGridViewColumnType.TextBox;

            column.SetDataItemTemplateContent(container =>
            {
                var isSalaryVisible = ViewData[Humica.Models.SY.ClsConstant.IS_SALARY] != null
                    && (bool)ViewData[Humica.Models.SY.ClsConstant.IS_SALARY];

                if (isSalaryVisible)
                {
                    Html.DevExpress().Label(l =>
                    {
                        l.Text = DataBinder.Eval(container.DataItem, "Salary").ToString();
                    }).Render();
                }
                else
                {
                    Html.Raw("#####");
                }
            });
        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("IsTax");
            column.FieldName = "IsTax";
            column.ColumnType = MVCxGridViewColumnType.CheckBox;

        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("IsNSSF");
            column.FieldName = "IsNSSF";
            column.ColumnType = MVCxGridViewColumnType.CheckBox;

        });
        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Association");
            column.FieldName = "Association";
            column.ColumnType = MVCxGridViewColumnType.CheckBox;

        });
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Hidden;
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
        settings.Settings.ShowHeaderFilterButton = true;

        settings.SettingsPager.PageSize = 15;
        settings.SettingsPager.EnableAdaptivity = true;
        settings.SettingsPager.PageSizeItemSettings.Visible = true;

        settings.SettingsExport.EnableClientSideExportAPI = true;
        settings.SettingsExport.ExportSelectedRowsOnly = true;
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.CustomJSProperties = (sender, e) =>
        {
            e.Properties["cpVisibleRowCount"] = (sender as MVCxGridView).VisibleRowCount;
        };
        settings.CellEditorInitialize = (s, e) =>
        {
            ASPxEdit editor = e.Editor as ASPxEdit;
            editor.ValidationSettings.Display = Display.Dynamic;
            bool isSalaryVisible = ViewData[Humica.Models.SY.ClsConstant.IS_SALARY] != null
                    && (bool)ViewData[Humica.Models.SY.ClsConstant.IS_SALARY];
            if (e.KeyValue == null)
            {
                if (e.Column.FieldName == "Salary")
                {
                    if (!isSalaryVisible)
                    {
                        editor.ReadOnly = true;
                        editor.Value = "#####";
                    }
                }
                if(e.Column.FieldName== "LineItem")
                {
                    editor.Value = 1;
                }
            }
            else
            {
                if (e.Column.FieldName == "Salary")
                {
                    editor.ReadOnly = true;
                    if (!isSalaryVisible)
                    {
                        editor.Value = "#####";
                    }
                }
            }
        };

    });

    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model).GetHtml()

