
@model Humica.Logic.LM.ATOnSiteRequestObject
<script type="text/javascript">
    var getFromDate = false;
    $(document).ready(function () {
        $(".startTimeField").hide();
        $(".endTimeField").hide();
        $("#OnSiteRequest_1_3_Cap").hide();
        $("#OnSiteRequest_1_4_Cap").hide();
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
    });
    function convert(str) {
        var date = new Date(str),
          mnth = ("0" + (date.getMonth() + 1)).slice(-2),
          day = ("0" + date.getDate()).slice(-2),
          Minutes = ("0" + date.getMinutes()).slice(-2);
        return [date.getFullYear(), mnth, day].join("-");
    }
    function OnClientValueChanged(s, e)
    {
       ShowData();
    }

    function ShowData() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: _baseUrl + '/SelfService/OnSite/OnSiteRequest/ShowData',
            data: {
                'id': txtUnits.GetValue(), 'FromDate': convert(txtFromDate.GetDate()), 'ToDate': convert(txtToDate.GetDate()),'Action': 'Create'
            },
            success: function (data) {
                if (data.MS == "OK") {
                    if (txtUnits.GetValue() === "Day") {
                        $(".fromDateField").show();
                        $("#OnSiteRequest_1_1_Cap").text("From Date");

                        $(".toDateField").show();
                        $("#OnSiteRequest_1_2_Cap").show();

                        $(".startTimeField").hide();
                        $("#OnSiteRequest_1_3_Cap").hide();

                        $(".endTimeField").hide();
                        $("#OnSiteRequest_1_4_Cap").hide();
                    } else {
                        //$(".fromDateField").hide();
                        $("#OnSiteRequest_1_1_Cap").text("Start Date");

                        $(".toDateField").hide();
                        $("#OnSiteRequest_1_2_Cap").hide();

                        $(".startTimeField").show();
                        $("#OnSiteRequest_1_3_Cap").show();

                        $(".endTimeField").show();
                        $("#OnSiteRequest_1_4_Cap").show();
                    }
                    GridItemDetails.Refresh();
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
    function OnClientUnitChanged(s, e) {
        $.ajax({
            type: 'post',
            url: _baseUrl + '/SelfService/OnSite/OnSiteRequest/ShowUNITS',
            data: { 'id': txtUnits.GetValue(), 'Action': 'Create' },
            success: function (data) {
                if (data.MS == "OK") {
                    GridItemDetails.Refresh();
                    if (txtUnits.GetValue() != null) {
                        ShowData();
                    }
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
    function SelectEmp(s, e) {
        selectedIDs = s.GetSelectedItem().GetColumnText(0);
        ShowDataEmp();
    }

    function ShowDataEmp() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: _baseUrl + '/SelfService/OnSite/OnSiteRequest/ShowDataEmp',
            data: { 'id': 'TOTAL', 'EmpCode': selectedIDs },
            success: function (data) {
                if (data.MS == "OK") {
                    var StartDate = data.StartDate;
                    nowDate = new Date(parseInt(StartDate.substr(6)));
                    txtAllName.SetValue(data.AllName);
                    txtEmpType.SetValue(data.EmpType);
                    txtDivision.SetValue(data.Division);
                    txtDepartment.SetValue(data.DEPT);
                    txtSection.SetValue(data.SECT);
                    txtLevel.SetValue(data.LevelCode);
                    txtPosition.SetValue(data.Position);
                    txtStartDate.SetValue(nowDate);
                    cboLeaveType.PerformCallback();
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
    function EndCallBack(s, e) {
        $.ajax({
            type: 'post',
            url: _baseUrl + '/SelfService/OnSite/OnSiteRequest/ReceiptTotal',
            data: { 'Action': 'Create' },
            success: function (data) {
                if (data.MS == "OK") {
                    txtNoDay.SetValue(data.NoDay);
                    txtNoPH.SetValue(data.NoPH);
                    txtNoRest.SetValue(data.NoRest);
                    txtBalance.SetValue(data.Balance);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
    function EmpDbRowClick(s, e) {
        s.GetRowValues(s.GetFocusedRowIndex(), 'EmpCode;', OnGetRowValuesEmp);
        cboEmployee.HideDropDown();
    }
    function rowSelected(s, e) {
        EmployeeGridListSelector.GetRowValues(EmployeeGridListSelector.GetFocusedRowIndex(), 'EmpCode;', OnGetRowValuesEmp);
        cboEmployee.HideDropDown();
    }
    function OnGetRowValuesEmp(values) {
        cboEmployee.SetValue(values[0]);
        selectedIDs = values[0];
        ShowDataEmp();
        OnInit();
    }
    function OnInit(s, e) {
        $.ajax({
            type: 'post',
            url: _baseUrl + '/HRM/Leave/HRLeaveRequest/EmployeeSelection',
            data: { 'EmpCode': s.GetValue() },
            success: function (data) {
                cboLeaveType.PerformCallback();
            }
        });
    }
    function cboLeaveType_SelectChange(s, e) {
        txtLeave.SetValue(s.GetValue());
        ShowData();
    }
</script>


@{

    Html.DevExpress().FormLayout(settings =>
    {

        settings.Name = "OnSiteRequest";
        settings.AlignItemCaptionsInAllGroups = true;

        settings.Items.AddGroupItem(m => Model.HeaderEmpOnSite, g =>
        {

            g.ColCount = 2;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmpCode");
            })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().ComboBoxFor(i => Model.HeaderStaff.EmpCode, s =>
                 {
                     s.Properties.ClientInstanceName = "cboEmployee";
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                     s.Properties.TextField = "AllName";
                     s.Properties.TextFormatString = "{0}";
                     s.Properties.ValueField = "EmpCode";
                     s.Properties.Columns.Add("EmpCode", Humica.EF.Models.SY.SYSettings.getLabel("EmpCode"));
                     s.Properties.Columns.Add("AllName", Humica.EF.Models.SY.SYSettings.getLabel("AllName"));
                     s.Properties.Columns.Add("OthAllName", Humica.EF.Models.SY.SYSettings.getLabel("OthAllName"));
                     s.Properties.ClientSideEvents.SelectedIndexChanged = "SelectEmp";
                     s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                 }).BindList(ViewData["STAFF_SELECT"]).Render();
             });
            //.SetNestedContent(() =>
            //{
            //    Html.DevExpress().DropDownEditFor(i => i.HeaderStaff.EmpCode, s =>
            //    {
            //        s.Properties.ClientInstanceName = "cboEmployee";
            //        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
            //        s.Properties.ValidationSettings.SetFocusOnError = true;
            //        s.Properties.ValidationSettings.ErrorText = "*";
            //        s.SetDropDownWindowTemplateContent(c =>
            //        {
            //            Html.RenderPartial(Humica.Models.SY.SYListFilter.ListFilterViewEmployee);

            //            ViewContext.Writer.Write("<div style=\"padding: 6px; height: 24px;\">


            //            @Html.DevExpress().Button(
            //                buttonSettings =>
            //                {
            //                    buttonSettings.Name = "buttonSelect";
            //                    buttonSettings.Text = Humica.EF.Models.SY.SYSettings.getLabel("Ok");
            //                    buttonSettings.Style.Add("float", "right");
            //                    buttonSettings.Style.Add("margin", "0px 3px");
            //                    buttonSettings.ClientSideEvents.Click = "rowSelected";
            //                    buttonSettings.Height = 25;
            //                }
            //                    ).Render();
            //            ViewContext.Writer.Write("</div>");


            //        });
            //        s.Properties.AnimationType = AnimationType.None;
            //    }).Render();
            //});
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("AllName");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderStaff.AllName, s =>
                {
                    s.Properties.ClientInstanceName = "txtAllName";
                    s.ReadOnly = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmployeeType");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderStaff.EmployeeType, s =>
                {
                    s.Properties.ClientInstanceName = "txtEmpType";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Division");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Division, s =>
                {
                    s.Properties.ClientInstanceName = "txtDivision";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Department");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Department, s =>
                {
                    s.Properties.ClientInstanceName = "txtDepartment";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Section");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Section, s =>
                {
                    s.Properties.ClientInstanceName = "txtSection";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("LevelCode");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Level, s =>
                {
                    s.Properties.ClientInstanceName = "txtStartDate";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Position");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Position, s =>
                {
                    s.Properties.ClientInstanceName = "txtPosition";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("StartDate");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().DateEditFor(i => i.HeaderStaff.StartDate, s =>
                {
                    s.Properties.ClientInstanceName = "txtStartDate";
                    s.ReadOnly = true;
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
        });
        settings.Items.AddGroupItem(m => Model.HeaderEmpOnSite, g =>
        {
            g.ColCount = 2;
            g.GroupBoxDecoration = GroupBoxDecoration.None;
            g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
            g.Items.Add(m =>
            {
                m.ColumnSpan = 2;
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Units");
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().ComboBoxFor(i => i.HeaderEmpOnSite.Unit, s =>
                {
                    s.Properties.ClientInstanceName = "txtUnits";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.TextFormatString = "{0}";
                    s.Properties.ValueField = "Description";
                    s.Properties.TextField = "Description";
                    s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                    s.Properties.ClientSideEvents.SelectedIndexChanged = "OnClientUnitChanged";
                }).BindList(ViewData["UNITS_SELECT"]).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("From Date") + "*";
                m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().DateEditFor(i => i.HeaderEmpOnSite.FromDate, s =>
                {
                    s.Properties.ClientInstanceName = "txtFromDate";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                    s.ControlStyle.CssClass = "fromDateField";
                }).Render();
            });

            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("ToDate") + "*";
                m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().DateEditFor(i => i.HeaderEmpOnSite.ToDate, s =>
                {
                    s.Properties.ClientInstanceName = "txtToDate";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                    s.ControlStyle.CssClass = "toDateField";
                }).Render();
            });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Start Time") + "*";
                m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().DateEditFor(i => i.HeaderEmpOnSite.StartTime, s =>
                {
                    s.Properties.ClientInstanceName = "txtStartTime";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;

                    s.Properties.EditFormat = EditFormat.Custom;
                    s.Properties.EditFormatString = "HH:mm";
                    s.Properties.DisplayFormatString = "HH:mm";
                    s.Properties.NullText = "HH:mm";

                    s.Properties.TimeSectionProperties.Visible = true;

                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                    s.ControlStyle.CssClass = "startTimeField";
                }).Render();
            });

            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("End Time") + "*";
                m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().DateEditFor(i => i.HeaderEmpOnSite.EndTime, s =>
                {
                    s.Properties.ClientInstanceName = "txtEndTime";
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
            
                    s.Properties.EditFormat = EditFormat.Custom;
                    s.Properties.EditFormatString = "HH:mm";     
                    s.Properties.DisplayFormatString = "HH:mm"; 
                    s.Properties.NullText = "HH:mm";
                    s.Properties.TimeSectionProperties.Visible = true;

                    s.Properties.ValidationSettings.ErrorText = "*";
                    s.Properties.ClientSideEvents.ValueChanged = "OnClientValueChanged";
                    s.ControlStyle.CssClass = "endTimeField";
                }).Render();
            });

            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Reason") + "*";
                m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
                m.ColSpan = 2;
            })
            .SetNestedContent(() =>
            {
                Html.DevExpress().TextBoxFor(i => i.HeaderEmpOnSite.Reason, s =>
                {
                    s.Width = Unit.Percentage(100);
                    s.ShowModelErrors = true;
                    s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                    s.Properties.ValidationSettings.SetFocusOnError = true;
                    s.Properties.ValidationSettings.ErrorText = "*";
                }).Render();
            });
            //g.Items.Add(m =>
            //{
            //    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Task Hand Over");
            //})
            // .SetNestedContent(() =>
            // {
            //     Html.DevExpress().ComboBoxFor(i => Model.HeaderEmpLeave.TaskHand_Over, s =>
            //     {
            //         //s.Properties.ClientInstanceName = "cboEmployee";
            //         s.ShowModelErrors = true;
            //         s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
            //         s.Properties.ValidationSettings.SetFocusOnError = true;
            //         s.Properties.ValidationSettings.ErrorText = "*";
            //         s.Properties.TextField = "AllName";
            //         s.Properties.TextFormatString = "{0}:{1}";
            //         s.Properties.ValueField = "EmpCode";
            //         s.Properties.Columns.Add("EmpCode", Humica.EF.Models.SY.SYSettings.getLabel("EmpCode"));
            //         s.Properties.Columns.Add("AllName", Humica.EF.Models.SY.SYSettings.getLabel("AllName"));
            //         s.Properties.Columns.Add("OthAllName", Humica.EF.Models.SY.SYSettings.getLabel("OthAllName"));
            //         //s.Properties.ClientSideEvents.SelectedIndexChanged = "SelectEmp";
            //         s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
            //     }).BindList(ViewData["STAFF_SELECT"]).Render();
            // });
            g.Items.Add(m =>
            {
                m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Attachment");
            })
        .SetNestedContent(() =>
        {
            Html.DevExpress().UploadControl(ss =>
            {
                ss.ShowProgressPanel = true;
                ss.CallbackRouteValues = new { Controller = "OnSiteRequest", Action = "UploadControlCallbackActionImage" };
                ss.Name = "UploadControl";
                ss.UploadMode = UploadControlUploadMode.Auto;
                ss.AutoStartUpload = true;
                ss.Width = 120;
                ss.DialogTriggerID = "externalDropZone";
                ss.AdvancedModeSettings.EnableDragAndDrop = false;
                ss.AdvancedModeSettings.EnableMultiSelect = false;
                ss.ShowTextBox = false;
                ss.ShowUploadButton = false;
                ss.ShowAddRemoveButtons = true;
                ss.ShowProgressPanel = true;
                ss.ShowClearFileSelectionButton = true;
                ss.AdvancedModeSettings.EnableFileList = true;
                ss.AdvancedModeSettings.FileListPosition = UploadControlFileListPosition.Top;
                ss.AdvancedModeSettings.ExternalDropZoneID = "externalDropZone";
                ss.AdvancedModeSettings.DropZoneText = "";
                ss.ValidationSettings.MaxFileSize = 4194304;
                ss.BrowseButton.Image.IconID = IconID.ActionsNew16x16;
                ss.UploadButton.Text = String.Empty;
                ss.ValidationSettings.AllowedFileExtensions = new string[] { ".jpg", ".jpeg", ".pdf", ".png", ".doc", ".docx", ".xls", ".xlsx", ".txt" };
                ss.ValidationSettings.ErrorStyle.CssClass = "validationMessage";
                ss.BrowseButton.Text = Humica.EF.Models.SY.SYSettings.getLabel("");
                ss.ClientSideEvents.FileUploadComplete = "completedUploadFileItem";
            }).Render();

        Html.DevExpress().HyperLink(
          s =>
          {
              s.Name = "file_uploaded";
              s.ToolTip = "File";
              s.ClientVisible = false;
              s.Properties.Target = "_BLANK";
              s.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");

          }).GetHtml();
    });
        });
    }).GetHtml();
    @Html.Partial("GridItemDetails", Model)
}
