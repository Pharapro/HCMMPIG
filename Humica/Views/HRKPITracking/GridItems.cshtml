@model Humica.Performance.IClsKPITracking
@{
    var grid = Html.DevExpress().GridView(
    settings =>
    {
        settings.Name = "gridItem";
        settings.KeyFieldName = "LineItem";
        settings.EnableTheming = true;
        settings.EnableRowsCache = true;
        settings.Width = Unit.Percentage(100);
        settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
        settings.CallbackRouteValues = new { Controller = "HRKPITracking", Action = "GridItems" };
        settings.SettingsEditing.AddNewRowRouteValues = new { Controller = "HRKPITracking", Action = "CreateItems" };
        settings.SettingsEditing.UpdateRowRouteValues = new { Controller = "HRKPITracking", Action = "EditItems" };
        settings.SettingsEditing.DeleteRowRouteValues = new { Controller = "HRKPITracking", Action = "DeleteItems" };

        settings.CommandColumn.Visible = true;
        settings.CommandColumn.ShowDeleteButton = true;

        settings.CommandColumn.ShowDeleteButton = true;
        settings.SettingsBehavior.AllowFocusedRow = true;

        settings.Settings.ShowGroupPanel = false;
        settings.Settings.ShowFooter = true;
        settings.SettingsContextMenu.Enabled = true;
        settings.Settings.ShowHeaderFilterButton = true;
        settings.SettingsPopup.HeaderFilter.Height = 200;
        settings.CommandColumn.FixedStyle = GridViewColumnFixedStyle.Left;

        settings.CommandColumn.ShowNewButtonInHeader = true;
        settings.CommandColumn.ShowCancelButton = true;
        settings.CommandColumn.ShowEditButton = true;
        settings.CommandColumn.ShowUpdateButton = true;
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.SettingsBehavior.ConfirmDelete = true;

        settings.Columns.Add(column =>
        {
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Description");
            column.Width = 250;
            column.FieldName = "Description";
            var PropertiesEdit = column.PropertiesEdit as TextBoxProperties;
            PropertiesEdit.ValidationSettings.RequiredField.IsRequired = true;
        });

        settings.Columns.Add(column =>
        {
            column.Width = 180;
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("FromTime");
            column.FieldName = "FromTime";
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            var PropertiesEdit = column.PropertiesEdit as DateEditProperties;
            PropertiesEdit.DisplayFormatString = "dd.MM.yyyy hh:mm tt";
            PropertiesEdit.EditFormatString = "dd.MM.yyyy hh:mm tt";
            PropertiesEdit.TimeSectionProperties.Visible = true;
            PropertiesEdit.TimeSectionProperties.TimeEditProperties.EditFormat = EditFormat.Custom;
            PropertiesEdit.TimeSectionProperties.TimeEditProperties.EditFormatString = "hh:mm tt";
            PropertiesEdit.ClientSideEvents.ValueChanged = "OnClientValueChanged";

            PropertiesEdit.ClientInstanceName = "txtFromTime";
        });
        settings.Columns.Add(column =>
        {
            column.Width = 180;
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("ToTime");
            column.FieldName = "ToTime";
            column.PropertiesEdit.DisplayFormatString = "dd.MM.yyyy hh:mm tt";
            column.ColumnType = MVCxGridViewColumnType.DateEdit;
            (column.PropertiesEdit as DateEditProperties).DisplayFormatString = "dd.MM.yyyy hh:mm tt";
            (column.PropertiesEdit as DateEditProperties).EditFormatString = "dd.MM.yyyy hh:mm tt";
            //(column.PropertiesEdit as DateEditProperties).DisplayFormatInEditMode = true;
            (column.PropertiesEdit as DateEditProperties).TimeSectionProperties.Visible = true;
            (column.PropertiesEdit as DateEditProperties).TimeSectionProperties.TimeEditProperties.EditFormat = EditFormat.Custom;
            (column.PropertiesEdit as DateEditProperties).TimeSectionProperties.TimeEditProperties.EditFormatString = "hh:mm tt";
            (column.PropertiesEdit as DateEditProperties).ClientInstanceName = "txtToTime";
            (column.PropertiesEdit as DateEditProperties).ClientSideEvents.ValueChanged = "OnClientValueChanged";
        });
        settings.Columns.Add(column =>
        {
            column.Width = 100;
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Hours");
            column.FieldName = "Hours";
            column.ColumnType = MVCxGridViewColumnType.SpinEdit;
            column.PropertiesEdit.ClientInstanceName = "txtHour";
            var spinEditProperties = column.PropertiesEdit as SpinEditProperties;
            spinEditProperties.DisplayFormatString = "N2";
            spinEditProperties.Width = Unit.Percentage(100);
            spinEditProperties.Style.HorizontalAlign = System.Web.UI.WebControls.HorizontalAlign.Right;
        });
        settings.Columns.Add(column =>
        {
            column.Width = 200;
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Remark");
            column.FieldName = "Remark";

            column.ColumnType = MVCxGridViewColumnType.Memo;
            var textProperties = column.PropertiesEdit as MemoProperties;
            textProperties.Width = 310;
            textProperties.Height = 100;
        });
        settings.Columns.Add(column =>
        {
            column.Width = 100;
            column.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Attachment");
            column.FieldName = "Attachment";
            column.SetDataItemTemplateContent(container =>
            {
                var attachment = Convert.ToString(DataBinder.Eval(container.DataItem, "Attachment"));
                if (!(attachment == null || attachment == ""))
                {
                    Html.DevExpress().HyperLink(hyperlink =>
                    {
                        hyperlink.Name = "file_" + container.VisibleIndex;
                        hyperlink.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");
                        hyperlink.Properties.Target = "_BLANK";
                        hyperlink.NavigateUrl = attachment;
                    }).Render();
                }
            });

            column.SetEditItemTemplateContent(c =>
            {
                Html.DevExpress().UploadControl(ss =>
                {
                    ss.ShowProgressPanel = true;
                    ss.CallbackRouteValues = new { Controller = "HRKPITracking", Action = "UploadControlCallbackActionTimeSheet" };
                    ss.Name = "FileUploadTimeSheet";
                    ss.UploadMode = UploadControlUploadMode.Auto;
                    ss.AutoStartUpload = true;
                    ss.Width = 80;
                    ss.DialogTriggerID = "externalDropZone";
                    ss.AdvancedModeSettings.EnableDragAndDrop = false;
                    ss.AdvancedModeSettings.EnableMultiSelect = false;
                    ss.ShowTextBox = false;
                    ss.ShowUploadButton = false;
                    ss.ShowAddRemoveButtons = false;
                    ss.ShowProgressPanel = true;
                    ss.ShowClearFileSelectionButton = true;
                    ss.AdvancedModeSettings.EnableFileList = true;
                    ss.AdvancedModeSettings.FileListPosition = UploadControlFileListPosition.Top;
                    ss.AdvancedModeSettings.ExternalDropZoneID = "externalDropZone";
                    ss.AdvancedModeSettings.DropZoneText = "";
                    ss.ValidationSettings.MaxFileSize = Convert.ToInt64(Humica.EF.Models.SY.SYSettings.getSetting(Humica.Models.SY.ClsConstant.MAX_FILE_SIZE_ATTACHMENT).SettinValue); ;
                    ss.BrowseButton.Image.IconID = IconID.ActionsNew16x16;
                    ss.ValidationSettings.AllowedFileExtensions = new string[] { ".jpg", ".jpeg", ".jpe", ".png", ".pdf" };
                    ss.ValidationSettings.ErrorStyle.CssClass = "validationMessage";
                    ss.BrowseButton.Text = Humica.EF.Models.SY.SYSettings.getLabel("");
                    ss.ClientSideEvents.FileUploadComplete = "completedUploadFileItem";
                }).Render();

                Html.DevExpress().HyperLink(
                s =>
                {
                    s.Name = "file_uploaded";
                    s.ToolTip = "File";
                    s.ClientVisible = false;
                    s.Properties.Target = "_BLANK";
                    s.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");

                }).GetHtml();

            });
        });
        settings.SettingsEditing.Mode = GridViewEditingMode.PopupEditForm;
        settings.SettingsEditing.EditFormColumnCount = 2;
        settings.SettingsPopup.EditForm.SettingsAdaptivity.MaxWidth = 800;
        settings.SettingsPopup.EditForm.SettingsAdaptivity.Mode = PopupControlAdaptivityMode.Always;
        settings.SettingsPopup.EditForm.SettingsAdaptivity.VerticalAlign = PopupAdaptiveVerticalAlign.WindowCenter;


        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Hidden;
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
        settings.Settings.ShowHeaderFilterButton = true;
        settings.CommandColumn.FixedStyle = GridViewColumnFixedStyle.Left;
        settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Visible;
        settings.Settings.VerticalScrollBarMode = ScrollBarMode.Visible;
        settings.Settings.VerticalScrollableHeight = Humica.EF.MD.SYSession.PageHieigh;
        settings.SettingsPager.PageSize = 200;
        settings.SettingsBehavior.AllowFocusedRow = true;
        settings.SettingsBehavior.ColumnResizeMode = ColumnResizeMode.Control;

        settings.CellEditorInitialize = (s, e) =>
        {
            ASPxEdit editor = (ASPxEdit)e.Editor;
            editor.ValidationSettings.Display = Display.Dynamic;
            editor.ReadOnly = false;
            if (e.Column.FieldName == "LineItem" || e.Column.FieldName == "Hours")
            {
                if (e.KeyValue != null)
                {
                    editor.ReadOnly = true;
                }
            }
            if (e.Column.FieldName == "Hours")
            {
                if (e.KeyValue == null)
                {
                    editor.ReadOnly = true;
                    editor.Value = 0;
                }
            }
            if (e.KeyValue == null)
            {
                if (e.Column.FieldName == "FromTime")
                {
                    editor.Value = Model.FromTime;
                }
                if (e.Column.FieldName == "ToTime")
                {
                    DateTime date = DateTime.Now;
                    editor.Value = Model.ToTime;
                }
            }
        };
    });
    if (ViewData["EditError"] != null)
    {
        grid.SetEditErrorText((string)ViewData["EditError"]);
    }
}
@grid.Bind(Model.ListTimeSheet).GetHtml()