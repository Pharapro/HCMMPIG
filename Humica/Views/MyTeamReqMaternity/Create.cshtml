
@model Humica.EForm.IClsHREmpSupense
<script type="text/javascript">

    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
    });
    function SelectEmp(s, e) {
        selectedIDs = s.GetSelectedItem().GetColumnText(0);
        ShowDataEmp();
    }
    function approverChange(s, e) {
        ApproverName.SetValue(s.GetSelectedItem().GetColumnText(1));

    }
  
    function ShowDataEmp() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: _baseUrl + '/SelfService/MyTeam/MyTeamReqMaternity/ShowDataEmp',
            data: { 'EmpCode': selectedIDs },
            success: function (data) {
                if (data.MS == "OK") {
                    var StartDate = data.StartDate;
                    nowDate = new Date(parseInt(StartDate.substr(6)));
                    txtAllName.SetValue(data.AllName);
                    txtEmpType.SetValue(data.EmpType);
                    txtDivision.SetValue(data.Division);
                    txtDepartment.SetValue(data.DEPT);
                    txtSection.SetValue(data.SECT);
                    txtLevel.SetValue(data.LevelCode);
                    txtPosition.SetValue(data.Position);
                    txtStartDate.SetValue(nowDate);
                    GridApproval.Refresh();
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }

    function EmpDbRowClick(s, e) {
        s.GetRowValues(s.GetFocusedRowIndex(), 'EmpCode;', OnGetRowValuesEmp);
        cboEmployee.HideDropDown();
    }

    function rowSelected(s, e) {
        EmployeeGridListSelector.GetRowValues(EmployeeGridListSelector.GetFocusedRowIndex(), 'EmpCode;', OnGetRowValuesEmp);
        cboEmployee.HideDropDown();
    }
    function OnGetRowValuesEmp(values) {
        cboEmployee.SetValue(values[0]);
        selectedIDs = values[0];
        ShowDataEmp();
    }
</script>

@Html.DevExpress().FormLayout(settings =>
{
    settings.Name = "MaterialCreate";
    settings.AlignItemCaptionsInAllGroups = true;

    settings.Items.AddGroupItem(m => Model.Header, g =>
    {
        g.ColCount = 3;
        g.GroupBoxDecoration = GroupBoxDecoration.None;
        g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;

        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmpCode");
            m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().ComboBoxFor(i => i.Header.EmpCode, s =>
            {
                s.Properties.ClientInstanceName = "txtEmpID";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.TextField = "AllName";
                s.Properties.TextFormatString = "{0}";
                s.Properties.ValueField = "EmpCode";
                s.Properties.Columns.Add("EmpCode", Humica.EF.Models.SY.SYSettings.getLabel("EmpCode"));
                s.Properties.Columns.Add("AllName", Humica.EF.Models.SY.SYSettings.getLabel("AllName"));
                s.Properties.Columns.Add("OthAllName", Humica.EF.Models.SY.SYSettings.getLabel("OthAllName"));
                s.Properties.Columns.Add("Department", Humica.EF.Models.SY.SYSettings.getLabel("Department"));
                s.Properties.Columns.Add("Position", Humica.EF.Models.SY.SYSettings.getLabel("Position"));
                s.Properties.ClientSideEvents.SelectedIndexChanged = "SelectEmp";
                s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
            }).BindList(ViewData["STAFF_SELECT"]).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("AllName");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.AllName, s =>
            {
                s.Properties.ClientInstanceName = "txtAllName";
                s.ReadOnly = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmployeeType");
        })
             .SetNestedContent(() =>
             {
                 Html.DevExpress().TextBoxFor(i => i.HeaderStaff.EmployeeType, s =>
                 {
                     s.Properties.ClientInstanceName = "txtEmpType";
                     s.ReadOnly = true;
                     s.ShowModelErrors = true;
                     s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                     s.Properties.ValidationSettings.SetFocusOnError = true;
                     s.Properties.ValidationSettings.ErrorText = "*";
                 }).Render();
             });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Division");
        })
           .SetNestedContent(() =>
           {
               Html.DevExpress().TextBoxFor(i => i.HeaderStaff.DivisionDesc, s =>
               {
                   s.Properties.ClientInstanceName = "txtDivision";
                   s.ReadOnly = true;
                   s.ShowModelErrors = true;
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
               }).Render();
           });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Department");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Department, s =>
            {
                s.Properties.ClientInstanceName = "txtDepartment";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Section");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Section, s =>
            {
                s.Properties.ClientInstanceName = "txtSection";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("LevelCode");
        })
           .SetNestedContent(() =>
           {
               Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Level, s =>
               {
                   s.Properties.ClientInstanceName = "txtLevel";
                   s.ReadOnly = true;
                   s.ShowModelErrors = true;
                   s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                   s.Properties.ValidationSettings.SetFocusOnError = true;
                   s.Properties.ValidationSettings.ErrorText = "*";
               }).Render();
           });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Position");
        })
          .SetNestedContent(() =>
          {
              Html.DevExpress().TextBoxFor(i => i.HeaderStaff.Position, s =>
              {
                  s.Properties.ClientInstanceName = "txtPosition";
                  s.ReadOnly = true;
                  s.ShowModelErrors = true;
                  s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                  s.Properties.ValidationSettings.SetFocusOnError = true;
                  s.Properties.ValidationSettings.ErrorText = "*";
              }).Render();
          });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("StartDate");
        })
         .SetNestedContent(() =>
         {
             Html.DevExpress().DateEditFor(i => i.HeaderStaff.StartDate, s =>
             {
                 s.Properties.ClientInstanceName = "txtStartDate";
                 s.ReadOnly = true;
                 s.ShowModelErrors = true;
                 s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                 s.Properties.ValidationSettings.SetFocusOnError = true;
                 s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                 s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                 s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                 s.Properties.ValidationSettings.ErrorText = "*";
             }).Render();
         });
    });
}).GetHtml()

@Html.DevExpress().PageControl(settings =>
{
    settings.Name = "pcScrollingMaterial1";
    settings.Width = Unit.Percentage(100);

    settings.EnableTabScrolling = true;
    settings.TabAlign = TabAlign.Justify;

    settings.Styles.Tab.CssClass = "scrolling_Tab";
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("General")).SetContent(() =>
    {
        Html.DevExpress().FormLayout(s1 =>
        {
            s1.Name = "CreateStaff1";
            s1.AlignItemCaptionsInAllGroups = true;

            s1.Items.AddGroupItem(m => Model.Header, g =>
            {
                g.ColCount = 2;
                g.GroupBoxDecoration = GroupBoxDecoration.None;
                g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
                g.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("FromDate") + "*";
                    m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
                })
                 .SetNestedContent(() =>
                 {
                     Html.DevExpress().DateEditFor(i => i.Header.FromDate, s =>
                     {
                         s.ShowModelErrors = true;
                         s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                         s.Properties.ValidationSettings.SetFocusOnError = true;
                         s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                         s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                         s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                         s.Properties.ValidationSettings.ErrorText = "*";
                     }).Render();
                 });
                g.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("ToDate") + "*";
                    m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
                })
                  .SetNestedContent(() =>
                  {
                      Html.DevExpress().DateEditFor(i => i.Header.ToDate, s =>
                      {
                          s.ShowModelErrors = true;
                          s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                          s.Properties.ValidationSettings.SetFocusOnError = true;
                          s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                          s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                          s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                          s.Properties.ValidationSettings.ErrorText = "*";
                      }).Render();
                  });
                g.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Reason") + "*";
                    m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
                    m.ColSpan = 2;
                })
                .SetNestedContent(() =>
                {
                    Html.DevExpress().TextBoxFor(i => i.Header.Description, s =>
                    {
                        s.Width = Unit.Percentage(100);
                        s.ShowModelErrors = true;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.SetFocusOnError = true;
                        s.Properties.ValidationSettings.ErrorText = "*";
                    }).Render();
                });
                g.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Remark");
                    m.ColSpan = 2;
                })
                .SetNestedContent(() =>
                {
                    Html.DevExpress().TextBoxFor(i => i.Header.Remark, s =>
                    {
                        s.Width = Unit.Percentage(100);
                        s.ShowModelErrors = true;
                        s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                        s.Properties.ValidationSettings.SetFocusOnError = true;
                        s.Properties.ValidationSettings.ErrorText = "*";
                    }).Render();
                });
                g.Items.Add(m =>
                {
                    m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Attach File");
                    m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
                })
           .SetNestedContent(() =>
           {
               Html.DevExpress().UploadControl(ss =>
               {
                   ss.ShowProgressPanel = true;
                   ss.CallbackRouteValues = new { Controller = "MyTeamReqMaternity", Action = "UploadControlCallbackActionImage" };
                   ss.Name = "UploadControl";
                   ss.UploadMode = UploadControlUploadMode.Auto;
                   ss.AutoStartUpload = true;
                   ss.Width = 120;
                   ss.DialogTriggerID = "externalDropZone";
                   ss.AdvancedModeSettings.EnableDragAndDrop = false;
                   ss.AdvancedModeSettings.EnableMultiSelect = false;
                   ss.ShowTextBox = false;
                   ss.ShowUploadButton = false;
                   ss.ShowAddRemoveButtons = true;
                   ss.ShowProgressPanel = true;
                   ss.ShowClearFileSelectionButton = true;
                   ss.AdvancedModeSettings.EnableFileList = true;
                   ss.AdvancedModeSettings.FileListPosition = UploadControlFileListPosition.Top;
                   ss.AdvancedModeSettings.ExternalDropZoneID = "externalDropZone";
                   ss.AdvancedModeSettings.DropZoneText = "";
                   ss.ValidationSettings.MaxFileSize = 4194304;
                   ss.BrowseButton.Image.IconID = IconID.ActionsNew16x16;
                   ss.UploadButton.Text = String.Empty;
                   ss.ValidationSettings.AllowedFileExtensions = new string[] { ".jpg", ".png", ".pdf" };
                   ss.ValidationSettings.ErrorStyle.CssClass = "validationMessage";
                   ss.BrowseButton.Text = Humica.EF.Models.SY.SYSettings.getLabel("");
                   ss.ClientSideEvents.FileUploadComplete = "completedUploadFileItem";
               }).Render();

               Html.DevExpress().HyperLink(s =>
               {
                   s.Name = "file_uploaded";
                   s.ToolTip = "File";
                   s.ClientVisible = false;
                   s.Properties.Target = "_BLANK";
                   s.Properties.Text = Humica.EF.Models.SY.SYSettings.getLabel("View");
               }).GetHtml();
           });
            });
        }).GetHtml();
    });

    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel((List<Humica.EF.MD.CFForm>)
     ViewData[Humica.EF.SYSConstant.LIST_CONF_FORM], "ApprovalDetail")).SetContent(() =>
     {
         Html.RenderPartial("GridApproval", Model.ListApproval);
     });
}).GetHtml()




