@model Humica.Performance.IClsKPITracking
<script type="text/javascript">

    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
    });
    function SelectKPI(s, e) {
        $.ajax({
            type: 'post',
            url: "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + "/ShowData_EmpKPI",
            data: { 'TaskID': s.GetValue() },
            success: function (data) {
                if (data.MS == "OK") {
                    //txtTask.SetValue(s.GetValue());
                    txtDescription.SetValue(data.KPI);
                    txtMeasure.SetValue(data.Measure);
                    txtTarget.SetValue(data.Target);
                    txtMethod.SetValue(data.Options);
                    txtTotalActual.SetValue(data.Actual);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
        });
    }

    function validateDocumentDate(sender) {
        var selectedDate = sender.GetDate();
        var currentDate = new Date();
        currentDate.setHours(0, 0, 0, 0);
        if (selectedDate > currentDate) {
            AlertMessage("Invalid Document Date: The selected date cannot be in the future");
            sender.SetDate(null);
        }
        $.ajax({
            type: 'POST',
            url: "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + "/ShowData_Date",
            data: { 'EmpCode': txtEmpCode.GetValue() ,'documentDate': convert(selectedDate) },
            success: function (data) {
            }
        });
    }
    function OnClientValueChanged(s, e) {
        ShowData();
    }
    function ShowData() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + '/CalculateHour',
            data: { 'DocmentDate': convert(txtDocumentDate.GetDate()), 'FromTime': convert(txtFromTime.GetDate()), 'ToTime': convert(txtToTime.GetDate())},
            success: function (data) {
                if (data.MS == "OK") {
                    var StartDate = data.FromTime;
                    nowDate = new Date(parseInt(StartDate.substr(6)));
                    txtHour.SetValue(data.Hour);
                    txtFromTime.SetValue(nowDate);
                }
                else {
                    AlertMessage(data.MS);
                }
            }
        });
    }
    function convert(str) {
        var date = new Date(str),
            year = date.getFullYear(),
            month = ("0" + (date.getMonth() + 1)).slice(-2),
            day = ("0" + date.getDate()).slice(-2),
            hours = ("0" + date.getHours()).slice(-2),
            minutes = ("0" + date.getMinutes()).slice(-2);
        return `${year}-${month}-${day} ${hours}:${minutes}`;
    }
</script>
@Html.DevExpress().FormLayout(settings =>
{

    settings.Name = "MaterialCreate";
    settings.AlignItemCaptionsInAllGroups = true;

    settings.Items.AddGroupItem(m => Model.HeaderKPITracking, g =>
    {
        g.ColCount = 3;
        g.GroupBoxDecoration = GroupBoxDecoration.None;
        g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmpCode");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderKPITracking.EmpCode, s =>
            {
                s.ReadOnly = true;
                s.Width = Unit.Percentage(85);
                s.Properties.ClientInstanceName = "txtEmpCode";
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Employee Name");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderKPITracking.EmpName, s =>
            {
                s.Width = Unit.Percentage(100);
                s.ShowModelErrors = true;
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtAllName";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Status");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderKPITracking.Status, s =>
            {
                s.Width = Unit.Percentage(100);
                s.ReadOnly = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Department");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderKPITracking.Department, s =>
            {
                s.Width = Unit.Percentage(100);
                s.ShowModelErrors = true;
                s.ReadOnly = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Position");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderKPITracking.Position, s =>
            {
                s.Width = Unit.Percentage(100);
                s.ShowModelErrors = true;
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtAllName";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("DocumentDate");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().DateEditFor(i => i.HeaderKPITracking.DocumentDate, s =>
            {
                s.Properties.ClientInstanceName = "txtDocumentDate";
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.ClientSideEvents.DateChanged = "function(s, e) { validateDocumentDate(s); }";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("KPI");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().ComboBoxFor(i => i.HeaderKPITracking.KPI, s =>
            {
                s.Properties.ClientInstanceName = "txtTask";
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.ValueField = "ItemCode";
                s.Properties.TextField = "ItemCode";
                s.Properties.TextFormatString = "{0}";
                s.Properties.Columns.Add("ItemCode", Humica.EF.Models.SY.SYSettings.getLabel("Task"),80);
                s.Properties.Columns.Add("KPI", Humica.EF.Models.SY.SYSettings.getLabel("KPI"), 450);
                //s.Properties.Columns.Add("Measure", Humica.EF.Models.SY.SYSettings.getLabel("Measure"), 80);
                //s.Properties.Columns.Add("Target", Humica.EF.Models.SY.SYSettings.getLabel("Target"), 80);
                s.Properties.ClientSideEvents.SelectedIndexChanged = "SelectKPI";
            }).BindList(ViewData["KPITASK_LIST"]).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Measure");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderKPITracking.Measure, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtMeasure";
                s.Width = Unit.Percentage(100);
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Target");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.HeaderKPITracking.Target, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtTarget";
                s.Width = Unit.Percentage(100);
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.DisplayFormatString = "N0";
                s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Method");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Options, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtMethod";
                s.Width = Unit.Percentage(100);
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("TotalActualTodate");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.TotalActual, s =>
            {
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtTotalActual";
                s.Width = Unit.Percentage(100);
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Actual");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().SpinEditFor(i => i.HeaderKPITracking.Actual, s =>
            {
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
                s.Properties.MinValue = 0;
                s.Properties.MaxValue = 9999999999999999999;
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("KPIDesciption");
            m.ColumnSpan = 3;
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().MemoFor(i => i.HeaderKPITracking.KPIDescription, s =>
            {
                s.Height = 50;
                s.ReadOnly = true;
                s.Properties.ClientInstanceName = "txtDescription";
                s.Width = Unit.Percentage(100);
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
    });
}).GetHtml()
@Html.DevExpress().PageControl(settings =>
{
    settings.Name = "pcScrollingMaterial1";
    settings.Width = Unit.Percentage(100);

    settings.EnableTabScrolling = true;
    settings.TabAlign = TabAlign.Justify;

    settings.Styles.Tab.CssClass = "scrolling_Tab";

    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("TimeSheet")).SetContent(() =>
    {
        Html.RenderPartial("GridItems", Model);
    });
}).GetHtml()