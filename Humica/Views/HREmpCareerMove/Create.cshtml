@model Humica.Employee.IClsEmpCareerMovement

<script type="text/javascript">
    $(document).ready(function () {
        $('#_btnBackAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]";
        });
        $('#_btnSaveActionGrid').click(function () {
            $("form").submit();
        });
        $('#lblUnderManager').click(function () {
            cboPopDepartment.SetValue(cboNewDepartment.GetValue());
            RefreshEmpCode(cboNewDepartment.GetValue());
            PartialEmployeeSearchAdd.PerformCallback({ ClearList: true });
            PopAddUnderMan.Show();
        });
        $('#lblTransfer').click(function () {
            PopTransfer.Show();
        });
        $('#_ConfirmAddUM').click(function () {
            if (cboManaType.GetValue() != null) {
                $.ajax({
                    type: "POST",
                    url: "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + '/AddEmpUM',
                    dataType: 'json',
                    data: { 'DocType': cboManaType.GetValue() },
                    success: function (data) {
                        if (data.MS == "OK") {
                            PopAddUnderMan.Hide();
                            GridUnderManager.Refresh();
                        }
                        else {
                        }
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        AlertMessage(XMLHttpRequest.responseText);

                    }
                });
            }
            else {
                alert("Please select document type");
            }

        });
        $('#_ConfirmTransfer').click(function () {
            if (cboPopStaff.GetValue() != null) {
            $.ajax({
                type: "POST",
                url: "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + '/TransferTo',
                dataType: 'json',
                data: { 'DocType': cboPopStaff.GetValue() },
                success: function (data) {
                    if (data.MS == "OK") {
                        PopTransfer.Hide();
                        GridUnderManager.Refresh();
                    }
                    else {
                    }
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    AlertMessage(XMLHttpRequest.responseText);
                }
            });
            }
            else {
                alert("Please select Employee");
            }
        });
        //cboResignType.SetEnabled(false);
        if (txtEvalPA.GetValue() == false) {
            txtPAStartDate.SetEnabled(false);
            txtDeadline1.SetEnabled(false);
            txtDeadline2.SetEnabled(false);
        }
        if (txtIsEvalKPI.GetValue() == false) {
            txtKPIStartDate.SetEnabled(false);
            txtKPIDeadline.SetEnabled(false);
        }
        if (txtIsClosedPA.GetValue() == true) {
            txtAppraisalType.SetEnabled(false);
            txtKPIType.SetEnabled(false);
            txtKPIStatus.SetEnabled(false);
        }
    });
    function selectCareerCode(s, e) {
        //cboResignType.SetEnabled(false);
        //cboResignType.SetValue("");;
        ////CbALRemaining.SetEnabled(false);
        ////CbALRemaining.SetValue(0);
        //var isCal = s.GetSelectedItem().GetColumnText(3);
        //if (isCal == "True") {
        //    cboResignType.SetEnabled(true);
        //    //CbALRemaining.SetEnabled(true);
        //}
        $.ajax({
            type: 'post',
            url: "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + '/SelectCriteriaType',
            data: { 'Code': cboCareerCode.GetValue() },
            success: function (data) {
                if (data.MS == "OK") {
                    cboResignType.ClearItems();
                    cboResignType.Clear();
                    for (var key in data.DATA) {
                        if (data.DATA.hasOwnProperty(key)) {
                            cboResignType.AddItem([data.DATA[key].Code, data.DATA[key].Description]);
                        }
                    }
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);
            }
        });
    }
    function OnClientValuePA(s, e) {
        var checked = s.GetChecked();
        txtPAStartDate.SetEnabled(checked);
        txtDeadline1.SetEnabled(checked);
        txtDeadline2.SetEnabled(checked);
    }
    function OnClientValueKPI(s, e) {
        var checked = s.GetChecked();
        txtKPIStartDate.SetEnabled(checked);
        txtKPIDeadline.SetEnabled(checked);
    }
    function OnClientClosedPA(s, e) {
        var checked = s.GetChecked();
        txtAppraisalType.SetEnabled(!checked);
        txtKPIType.SetEnabled(!checked);
        txtKPIStatus.SetEnabled(!checked);
    }
    function valueChange(s, e) {
        Refreshvalue();
    }
    function Refreshvalue() {
        var total = 0;
        $.ajax({
            type: 'post',
            url: "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + '/Refreshvalue',
            data: { 'id': 'TOTAL', 'Increase': txtIncrease.GetValue() },
            success: function (data) {
                if (data.MS == "OK") {
                    txtNewSalary.SetValue(data.NewSalary);
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
    function ChangePopDepartment(s, e) {
        RefreshEmpCode(s.GetValue());
    }
    function RefreshEmpCode(values) {
        $.ajax({
            type: 'post',
            url: "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + '/RefreshEmp',
            data: { 'Dept': values },
            success: function (data) {
                if (data.MS == "OK") {
                    PartialEmployeeSearch.Refresh();
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);

            }
        });
    }
    function OnChanged_Transfer(s, e) {
        s.GetSelectedFieldValues("DocumentType;EmpCode", GetSelectedFieldValuesCallback);
    }
    function GetSelectedFieldValuesCallback(values) {
        selectedIDs = "";
        ssFrom = "";
        for (var index = 0; index < values.length; index++) {
            selectedIDs += values[index] + ";";
            ssFrom = selectedIDs;
        }
        if (selectedIDs.length > 0) {
            selectedIDs = selectedIDs.substring(0, selectedIDs.length - 1);
        }
        $.ajax({
            type: 'post',
            url: _baseUrl + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + '/getEmpCode',
            data: { 'EmpCode': selectedIDs, 'Action': 'Create' },
            success: function (data) {
                if (data == "OK") {

                }
                else {
                    AlertMessage(data);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);
            }
        });

    }

    function OnSelectionChanged(s, e) {
        EmployeeTransfer.gridInstance = s;
        EmployeeTransfer.isDataReady = false;
        const btnTransfer = ASPxClientControl.GetControlCollection().GetByName('_btnTransfer');
        if (btnTransfer) {
            btnTransfer.SetEnabled(false);
            btnTransfer.SetVisible(true);
        }
        EmployeeTransfer.debounceGetSelectedValues();
    }
    const EmployeeTransfer = {
        selectedEmployeeIDs: [],
        gridInstance: null,
        isDataReady: false,

        debounceGetSelectedValues: debounce(() => {
            EmployeeTransfer.isDataReady = false;
            EmployeeTransfer.gridInstance.GetSelectedFieldValues("EmpCode", (values) => {
                EmployeeTransfer.GetSelectedFieldValuesCallback(values);
            });
        }, 100),

        GetSelectedFieldValuesCallback(values) {
            this.selectedEmployeeIDs = values
                .filter(code => code?.trim())
                .map(code => code.trim());

            this.isDataReady = true;
            onDataLoaded();
        },

        TransferSelectedItems() {
            const btnTransfer = ASPxClientControl.GetControlCollection().GetByName('_btnTransfer');

            if (!this.gridInstance) {
                alert("Please select employees.");
                return;
            }

            if (!this.isDataReady || (btnTransfer && !btnTransfer.GetEnabled())) {
                alert("Data is still loading. Please wait.");
                return;
            }

            const empCodeString = this.selectedEmployeeIDs.join(";");
            if (!empCodeString) {
                alert("No valid employee codes selected.");
                return;
            }

            $.ajax({
                type: 'POST',
                url: `${_baseUrl}@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]/AddEmpCode`,
                data: { EmpCode: empCodeString, Action: 'Create' },
                cache: false,
                success: (data) => {
                    if (data === "OK") {
                        PartialEmployeeSearchAdd?.Refresh?.();
                    } else {
                        AlertMessage(`Transfer failed: ${data}`);
                    }
                },
                error: (xhr) => {
                    AlertMessage(`Transfer error: ${xhr.responseText}`);
                }
            });
        }
    };
    function debounce(func, delay) {
        let timeoutId;
        return function (...args) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => func.apply(this, args), delay);
        };
    }
    function onDataLoaded() {
        try {
            const btnTransfer = ASPxClientControl.GetControlCollection().GetByName('_btnTransfer');
            if (btnTransfer && EmployeeTransfer.selectedEmployeeIDs.length > 0) {
                btnTransfer.SetVisible(true);
                btnTransfer.SetEnabled(true);
                const el = document.getElementById('_btnTransfer');
                if (el) {
                    el.disabled = false;
                    el.classList.remove('dxDisabled', 'disabled');
                }
            }
        } catch (error) {
            console.error('Error in onDataLoaded:', error);
        }
    }

</script>

@Html.DevExpress().FormLayout(settings =>
{
    settings.Name = "MaterialCreate";
    settings.AlignItemCaptionsInAllGroups = true;
    var IsSalary = false;
    var isReadOnly = false;
    if (ViewData[Humica.Models.SY.ClsConstant.IS_READ_ONLY] != null)
    {
        isReadOnly = true;
    }
    if (ViewData[Humica.Models.SY.ClsConstant.IS_SALARY] != null)
    {
        IsSalary = (bool)ViewData[Humica.Models.SY.ClsConstant.IS_SALARY];
    }
    settings.Items.AddGroupItem(m => Model.Header, g =>
    {
        g.ColCount = 3;
        g.GroupBoxDecoration = GroupBoxDecoration.None;
        g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;

        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmpCode");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.EmpCode, s =>
            {
                s.ReadOnly = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EmployeeName");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.EmployeeName, s =>
            {
                s.Properties.ClientInstanceName = "txtEmployeeName";
                s.ReadOnly = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Status");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.Status, s =>
            {
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
    });
    settings.Items.AddGroupItem(m => Model.Header, g =>
    {
        g.ColCount = 3;
        g.GroupBoxDecoration = GroupBoxDecoration.Box;
        g.SettingsItemCaptions.HorizontalAlign = FormLayoutHorizontalAlign.Left;
        g.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Salary Information");
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("CareerCode") + "*";
            m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().ComboBoxFor(i => i.Header.CareerCode, s =>
            {
                s.Properties.ClientInstanceName = "cboCareerCode";
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.TextFormatString = "{1}";
                s.Properties.ValueField = "Code";
                s.Properties.TextField = "Description";
                s.Properties.Columns.Add("Code", Humica.EF.Models.SY.SYSettings.getLabel("Code"), 80);
                s.Properties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"), 250);
                s.Properties.Columns.Add("SecDescription", Humica.EF.Models.SY.SYSettings.getLabel("Second Description"), 250);
                s.Properties.Columns.Add("NotCalSalary", Humica.EF.Models.SY.SYSettings.getLabel("Not Cal. Salary"));
                s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                s.Properties.ClientSideEvents.SelectedIndexChanged = "selectCareerCode";
            }).BindList(ViewData["CareerHistories_SELECT"]).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("EffectDate") + "*";
            m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
        })
       .SetNestedContent(() =>
       {
           Html.DevExpress().DateEditFor(i => i.Header.EffectDate, s =>
           {
               s.Properties.ClientInstanceName = "txtCEff";
               s.ShowModelErrors = true;
               s.Properties.ValidationSettings.RequiredField.IsRequired = true;
               s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
               s.Properties.ValidationSettings.SetFocusOnError = true;
               s.Properties.NullText = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
               s.Properties.EditFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
               s.Properties.DisplayFormatString = ViewData[Humica.EF.SYSConstant.DATE_FORMAT].ToString();
               s.Properties.ValidationSettings.ErrorText = "*";

           }).Render();
       });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Separate Type");
        })
       .SetNestedContent(() =>
       {
           Html.DevExpress().ComboBoxFor(i => i.Header.Resigntype, s =>
           {
               s.Properties.ClientInstanceName = "cboResignType";
               s.ShowModelErrors = true;
               s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
               s.Properties.ValidationSettings.SetFocusOnError = true;
               s.Properties.AllowNull = true;
               s.Properties.ValidationSettings.ErrorText = "*";
               s.Properties.TextFormatString = "{1}";
               s.Properties.ValueField = "Code";
               s.Properties.TextField = "Description";
               s.Properties.Columns.Add("Code", Humica.EF.Models.SY.SYSettings.getLabel("Code"), 80);
               s.Properties.Columns.Add("Description", Humica.EF.Models.SY.SYSettings.getLabel("Description"), 250);
               s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
           }).BindList(ViewData["SEPARATE_SELECT"]).Render();
       });

        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("OldSalary");
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.OldSalary, s =>
            {
                s.Properties.ClientInstanceName = "txtCSalary";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.DisplayFormatString = "N2";
                s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;

            }).Render();
        });

        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Increase");
            m.CaptionStyle.ForeColor = System.Drawing.Color.Red;
        })
        .SetNestedContent(() =>
        {
            Html.DevExpress().SpinEditFor(i => i.Increase, s =>
            {
                s.ReadOnly = IsSalary;
                s.Properties.ClientInstanceName = "txtIncrease";
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.DisplayFormatString = "N2";
                s.Properties.ClientSideEvents.NumberChanged = "valueChange";
                s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("NewSalary");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.NewSalary, s =>
            {
                s.Properties.ClientInstanceName = "txtNewSalary";
                s.ReadOnly = true;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.DisplayFormatString = "N2";
                s.Properties.ValidationSettings.ErrorText = "*";
                s.ControlStyle.HorizontalAlign = HorizontalAlign.Right;
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("NewEmpCode");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().TextBoxFor(i => i.Header.NewEmpCode, s =>
            {
                s.ReadOnly = isReadOnly;
                s.Width = Unit.Percentage(100);
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Telegram Group");
        }).SetNestedContent(() =>
        {
            Html.DevExpress().ComboBoxFor(i => i.Header.TeleGroup, s =>
            {
                s.ReadOnly = isReadOnly;
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
                s.Properties.TextFormatString = "{0}";
                s.Properties.ValueField = "ChatID";
                s.Properties.TextField = "Description";
                s.Properties.NullText = Humica.EF.Models.SY.SYSettings.getLabel("_SELECT");
                s.Properties.AllowNull = true;
            }).BindList(ViewData["TELEGRAM_SELECT"]).Render();
        });
        g.Items.Add(m =>
        {
            m.Caption = Humica.EF.Models.SY.SYSettings.getLabel("Reason") + "*";
            m.ColSpan = 3;
        }).SetNestedContent(() =>
        {
            Html.DevExpress().MemoFor(i => i.Header.Reason, s =>
            {
                s.ReadOnly = isReadOnly;
                s.Width = Unit.Percentage(100);
                s.ShowModelErrors = true;
                s.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                s.Properties.ValidationSettings.SetFocusOnError = true;
                s.Properties.ValidationSettings.ErrorText = "*";
            }).Render();
        });
    });
}).GetHtml()
@Html.DevExpress().PageControl(settings =>
{
    settings.Name = "pcScrollingMaterial1";
    settings.Width = Unit.Percentage(100);
    settings.EnableTabScrolling = true;
    settings.TabAlign = TabAlign.Justify;
    settings.Styles.Tab.CssClass = "scrolling_Tab";

    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Job Details")).SetContent(() =>
    {
        Html.RenderPartial("TabJob", Model);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Subordinate")).SetContent(() =>
    {
        Html.RenderPartial("TabSubordinate", Model);
        Html.RenderPartial("GridUnderManager", Model);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Supervisor")).SetContent(() =>
    {
        Html.RenderPartial("TapManApprover", Model);
    });
    settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Performance")).SetContent(() =>
    {
        Html.RenderPartial("TabPerformance", Model);
    });
}).GetHtml()

@Html.Partial("PopAddUnderMan", Model)
@Html.Partial("PopTransfer", Model)
