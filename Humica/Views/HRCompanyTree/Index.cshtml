<script type="text/javascript">
    $(document).ready(function () {
        $('#_btnExportAction').click(function () {
            window.location = "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL].ToString()" + "ExportTo?id=" + pcScrollingMaterial1.GetActiveTab().index;
        });

        function initializeOrgChart(chartData) {
            // Clear existing chart
            $('#chart-container').empty();

            // Initialize new chart
            $('#chart-container').orgchart({
                'data': chartData,
                'hideRootNode': true,
                'nodeID': 'empCode',
                'parentNodeSymbol': '',
                'createNode': function ($node, data) {
                    $node.append(`
                <div class="node-content">
                    <center><div class="name" style='visibility:hidden'>${data.name}</div></center>
                    <div class="designation" style='font-size:18px'>${data.designation}</div>
                    <div class="emp-code" style='visibility:hidden'>${data.empCode}</div>
                    <div class="email" style='visibility:hidden'>
                        <a href="mailto:${data.email || ''}">${data.email || 'N/A'}</a>
                    </div>
                </div>
            `).attr('title', `Email: ${data.email || 'N/A'}`);
                }
            });
        }

        $('#filterButton').click(function (event) {
            event.preventDefault(); // Prevent the default form submission
            $.ajax({
                url: '@Url.Action("GetData", "HRCompanyTree")',
                type: 'POST',
                data: { Branch: '', Department: '' },
                success: function (response) {
                    console.log("Server response:", response);
                    if (response.MS === "OK") {
                        const data = response.DT;
                        console.log("Chart data:", data);
                        if (!data || data.length === 0) {
                            $('#chart-container').html('<div style="padding: 20px; text-align: center; color: #666;">No organizational data available for the selected criteria.</div>');
                            return;
                        }
                        const chartData = buildHierarchy(data);
                        console.log("Built hierarchy:", chartData);
                        initializeOrgChart(chartData);
                    } else {
                        $('#chart-container').html('<div style="padding: 20px; text-align: center; color: #666;">Error loading organizational data. Please try again.</div>');
                        console.error("Error in response:", response);
                    }
                },
                error: function (xhr, status, error) {
                    $('#chart-container').html('<div style="padding: 20px; text-align: center; color: #666;">Error loading organizational data. Please try again.</div>');
                    console.error("AJAX error:", error);
                    console.log("Status:", status);
                    console.log("Response:", xhr.responseText);
                }
            });
        });
        function buildHierarchy(data) {
            console.log("Starting to build hierarchy with data:", data);
            const map = {};
            const roots = [];

            // First pass: Create all nodes
            data.forEach(function (item, index) {
                console.log(`Processing item ${index}:`, item);
                if (!item.EmpCode) {
                    console.warn("Found item without EmpCode:", item);
                    return;
                }

                map[item.EmpCode] = {
                    'name': item.Name || 'Unknown',
                    'designation': item.Designation || 'N/A',
                    'empCode': item.EmpCode,
                    'email': item.Email || '',
                    'children': []
                };
            });

            console.log("Created node map:", map);

            // Second pass: Build relationships
            data.forEach(function (item) {
                if (!item.EmpCode) return;

                var node = map[item.EmpCode];
                if (item.ReportingID && map[item.ReportingID]) {
                    console.log(`Adding ${item.EmpCode} as child of ${item.ReportingID}`);
                    map[item.ReportingID].children.push(node);
                } else {
                    console.log(`Adding ${item.EmpCode} as root node (ReportingID: ${item.ReportingID})`);
                    roots.push(node);
                }
            });

            console.log("Final roots array:", roots);

            if (roots.length > 1) {
                console.log("Multiple roots found, creating organization root node");
                return {
                    'name': 'Organization',
                    'designation': 'Root',
                    'empCode': 'ORG',
                    'children': roots
                };
            } else if (roots.length === 1) {
                console.log("Single root found, using as main node");
                return roots[0];
            } else {
                console.log("No roots found, returning null");
                return null;
            }
        }

        // Trigger initial load with default values
        $('#filterButton').trigger('click');

        // PDF Export functionality
        $('#exportButton').click(function () {
            const { jsPDF } = window.jspdf;
            const container = document.getElementById('chart-container');

            // Store original styles
            const originalStyles = {
                width: container.style.width,
                height: container.style.height,
                position: container.style.position,
                overflow: container.style.overflow
            };

            // Temporarily modify container to capture full content
            container.style.width = container.scrollWidth + 'px';
            container.style.height = container.scrollHeight + 'px';
            container.style.position = 'relative';
            container.style.overflow = 'visible';

            html2canvas(container, {
                scale: 2,
                useCORS: true,
                allowTaint: true,
                scrollX: 0,
                scrollY: 0,
                windowWidth: container.scrollWidth,
                windowHeight: container.scrollHeight,
                width: container.scrollWidth,
                height: container.scrollHeight
            }).then(canvas => {
                // Restore original styles
                Object.assign(container.style, originalStyles);

                const pdf = new jsPDF('l', 'pt', [canvas.width, canvas.height]);
                const pageWidth = pdf.internal.pageSize.getWidth();
                const pageHeight = pdf.internal.pageSize.getHeight();
                const imgWidth = canvas.width;
                const imgHeight = canvas.height;

                // Calculate the number of pages needed
                const pagesNeeded = Math.ceil(imgHeight / pageHeight);

                // Add pages as needed
                for (let i = 0; i < pagesNeeded; i++) {
                    if (i > 0) {
                        pdf.addPage();
                    }

                    // Calculate the slice of the image to add to this page
                    const sourceY = i * pageHeight;
                    const sliceHeight = Math.min(pageHeight, imgHeight - sourceY);

                    pdf.addImage(
                        canvas.toDataURL('image/png'),
                        'PNG',
                        0,
                        i === 0 ? 0 : -sourceY,
                        imgWidth,
                        imgHeight
                    );
                }

                pdf.save('OrgChart.pdf');
            }).catch(error => {
                console.error('Error generating PDF:', error);
                alert('Error generating PDF. Please try again.');
                // Restore original styles in case of error
                Object.assign(container.style, originalStyles);
            });
        });
    });
    function SelectCompanyGroup(s, e) {
        var _Code = s.GetSelectedItem().GetColumnText(1);
        txtWorkGroup.SetValue(_Code);
        $.ajax({
            type: 'post',
            url: "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + '/SelectItemElement',
            data: { 'Code': _Code },
            success: function (data) {
                if (data.MS == "OK") {
                    gridCompanyTree.Refresh();
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);
            }
        });
    }
    function SelectCompanyMember(s, e) {
        txtCompanyMemberDesc.SetValue(s.GetSelectedItem().GetColumnText(1));
    }
    function OnBeginCallback(s, e) {
        if (e.command == "STARTEDIT") {
            e.customArgs["WorkGroup"] = s.GetRowKey(s.GetFocusedRowIndex());
            $.ajax({
                type: 'post',
                url: "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + '/SelectItemID',
                data: { 'ID': e.customArgs["WorkGroup"] },
                success: function (data) {
                    if (data == "OK") {
                        gridCompanyTree.Refresh();
                    }
                },
            });
        }
    }
    function button1_CheckedChanged(s, e) {
        if (s.GetChecked()) {
            location.reload();
        } else {
            location.reload();
        }
    }
    @*function SelectCompanyGroup(s, e) {
        $.ajax({
            type: 'post',
            url: "@Humica.EF.Models.SY.SYUrl.getBaseUrl()" + "@ViewData[Humica.EF.Models.SY.SYConstant.CURRENT_URL]" + '/SelectParentElement',
            data: { 'Code': txtCompanyMember.SetValue() },
            success: function (data) {
                if (data.MS == "OK") {
                    gridCompanyTree.Refresh();
                }
                else {
                    AlertMessage(data.MS);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                AlertMessage(XMLHttpRequest.responseText);
            }
        });
    }*@


</script>


@model  Humica.Logic.HRS.MDCompanyTree
@Html.DevExpress().PageControl(
    settings =>
    {
        settings.Name = "pcScrollingMaterial1";
        settings.Width = Unit.Percentage(100);

        settings.EnableTabScrolling = true;
        settings.TabAlign = TabAlign.Justify;

        settings.Styles.Tab.CssClass = "scrolling_Tab";
        settings.Styles.Content.Paddings.Padding = Unit.Pixel(0); // Remove padding that might affect scrolling

        settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Company")).SetContent(() =>
        {
            @Html.RenderPartial("GridviewCompanyGroups", Model.ListCompanyGroup);
        });
        settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("CompanyTree")).SetContent(() =>
        {
            @Html.RenderPartial("GridviewTree", Model.ListCompanyTree);

        });
        settings.TabPages.Add(Humica.EF.Models.SY.SYSettings.getLabel("Tree")).SetContent(() =>
        {
            @Html.DevExpress().Button(s =>
            {
                s.Name = "button1";
                s.Text = "Refresh";
                s.Width = 120;
                s.GroupName = "FakeGroup";
                s.ClientSideEvents.CheckedChanged = "button1_CheckedChanged";
            }).GetHtml();

            @Html.RenderPartial("CompanyTree", Model);
        });
    }).GetHtml()
@*</div>
        </div>
    </div>*@
